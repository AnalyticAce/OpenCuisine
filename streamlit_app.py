import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
from time import *
import time
import numpy as np
import json
import openai
import requests
import base64
from fpdf import FPDF
import os
from pdfminer.high_level import extract_text

pdf_path = "Data/"
parts = ["s", "k", "-", "ggb", "h0U", "Uuo", "RLeO","SBfe", "OKfT3Blb","kFJj", "ZrAb","HlF", "Rxt4","Aeq", "9Fe9p"]
order = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

def text_to_pdf(text, filename):
    global pdf_path
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size = 15)
    lines = text.split('\n')
    for line in lines:
        pdf.multi_cell(0, 10, txt = line)
    pdf_file_path = f"{pdf_path}/{filename}.pdf"
    pdf.output(pdf_file_path)
    return pdf_file_path

def get_pdf_download_link(pdf_path, name):
    with open(pdf_path, 'rb') as f:
        pdf_file = f.read()
    b64 = base64.b64encode(pdf_file).decode()
    href = f'<a href="data:file/pdf;base64,{b64}" download="{name}.pdf">Click here to download your receipe PDF file</a>'
    return href

@st.cache_data(show_spinner=False)
def cooking(recipe):
    
    def concatenate_key(parts, order):
        return ''.join(parts[i - 1] for i in order)
    
    global parts, order
    openai.api_key = concatenate_key(parts, order)
    
    prompt = f"""
    Please provide a detailed recipe for {recipe}.

    1. Origin: What is the origin of {recipe}?
    2. How to Make: What are the steps to make {recipe}?
    3. What to Serve With: What dishes or drinks pair well with {recipe}?
    4. Ingredients: What are the ingredients needed for {recipe}?
    5. Directions: Please provide step-by-step instructions to prepare {recipe}.
    """

    response = openai.Completion.create(
        engine="gpt-3.5-turbo-instruct",
        prompt=prompt,
        temperature=0.7,
        max_tokens=1000
    )

    try:
        response_text = response.choices[0].text.strip()
    except json.JSONDecodeError as e:
        st.error('Error occurred when generating recipe, **Please Press the Generate Your Recipe Button**', icon='üö®')

    return response_text

def home():
    if 'page' not in st.session_state:
        st.session_state.page = 'home'

    welcome_message = st.empty()

    if st.session_state.page == 'home':
        if 'first_time' not in st.session_state:
            st.session_state.first_time = False
        
        st.markdown("""
        Are you looking to create personalized recipes? Do you want to leverage the power of AI to generate unique recipes? If yes, then **Open Kitchen** is the perfect tool for you!

        **How does it work?** ü§î
        1. Enter your name.
        2. Press the :blue["Start Cooking"] and follow the instructions.
        3. Prompt your favorite meal to get the full recipe

        ‚ö†Ô∏è **Important:** Your cooking recipe must be valid to proceed to the next step.

        Once you've input your recipe, voil√†! You're ready to start the discussion with your custom assistant. Press the ***:red[Start Cooking]*** Button and follow the instructions to engage with your AI-powered chef. Let's revolutionize cooking together!
        """)
        
        with st.form("user_input"):
            st.session_state.name = st.text_input("Enter your Name here:", placeholder="e.g., Horace, Shalom, Salem")
            submitted = st.form_submit_button("Start Cooking", type="primary")
            
            if submitted:
                st.session_state.page = 'Recipe'

    if st.session_state.page == 'Recipe':
        if "messages" not in st.session_state:
            st.session_state.messages = []
        
        welcome_message.title(f"Welcome {st.session_state.name} to :blue[Open] :red[Kitchen]", anchor=False)
        
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                    
        if prompt := st.chat_input("What kind of recipe would you like to create üòä ?"):
            with st.chat_message("user"):
                st.markdown(prompt)

            st.session_state.messages.append({"role": "user", "content": prompt})

            with st.chat_message("assistant"):
                response_text = cooking(prompt)
                st.markdown(response_text)
                name = f'{st.session_state.name}-{prompt}'
                savef = text_to_pdf(response_text, name)
                st.markdown(get_pdf_download_link(savef, name), unsafe_allow_html=True)

            st.session_state.messages.append({"role": "assistant", "content": response_text})

def community():
    st.title("Community Section")
    st.write("Here you can see all the recipes generated by other users")

    pdf_files = [f for f in os.listdir('Data') if f.endswith('.pdf')]

    selected_pdf = st.selectbox("Select a recipe", pdf_files)

    if selected_pdf:
        st.write(f"You selected {selected_pdf}")

        st.markdown(get_pdf_download_link(f"Data/{selected_pdf}", selected_pdf), unsafe_allow_html=True)
        pdf_text = extract_text(f"Data/{selected_pdf}")
        st.write(pdf_text)

def main():
    
    st.set_page_config(
        page_title="Open Kitchen",
        page_icon="üçΩÔ∏è",
        layout="centered",
        initial_sidebar_state="collapsed"
    )

    selected_page = option_menu(
        menu_title=None,
        options=["Home", "Community"],
        default_index=0,
        orientation="horizontal",
    )

    with open("style/style.css") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

    if selected_page == "Home":
        local_image_path = "logo.png"
        st.image(local_image_path, width=800)
        home()
    elif selected_page == "Community":
        community()

if __name__ == "__main__":
    main()